---
description: Supabase 関連ルール
globs: 
alwaysApply: false
---
# Supabase 関連ルール

## コマンド実行

Supabase コマンドは必ず npx 経由で実行してください。
これは、プロジェクトでグローバルインストールされた supabase コマンドに依存せず、常に適切なバージョンの supabase コマンドを使用するためです。

```bash
# 正しい実行方法
npx supabase migration up
```

## マイグレーション

データベーススキーマの管理は [Supabase の宣言的なデータベーススキーマアプローチ](mdc:https:/supabase.com/docs/guides/local-development/declarative-database-schemas) に従って進めてください。

### スキーマファイル

スキーマファイルは `supabase/schemas/` ディレクトリに配置し、以下のルールに従ってください：

1. **テーブル定義**：テーブル構造、カラム、制約、インデックスなどを定義します。
2. **関数定義**：トリガー関数などのデータベース関数を定義します。
3. **トリガー定義**：テーブルに対するトリガーを定義します。
4. **RLS ポリシー**：Row Level Security ポリシーを定義します。

スキーマファイルは「あるべき状態」を表現するものであり、常に最新の状態を維持してください。

### マイグレーションファイル

マイグレーションファイルは `supabase/migrations/` ディレクトリに配置し、以下のルールに従ってください：

1. **新しいマイグレーションの作成**：

```bash
npx supabase migration new <migration_name>
```

2. **マイグレーションの適用**：

```bash
npx supabase migration up
```

3. **マイグレーションファイルの内容**：
   - 既存のオブジェクトを削除する DROP ステートメント
   - スキーマファイルの変更を反映する CREATE/ALTER ステートメント

マイグレーションファイルは「現在の状態からあるべき状態への変更」を表現するものです。

### スキーマ差分の生成

データベースの変更を自動的に検出し、マイグレーションファイルを生成するには、`db diff`コマンドを使用します：

```bash
# 標準出力に差分を表示
npx supabase db diff

# ファイル名を指定して差分をマイグレーションファイルとして保存
npx supabase db diff -f <migration_name>
```

### 開発ワークフロー

1. **スキーマファイルの更新**：まず、`supabase/schemas/` ディレクトリのスキーマファイルを更新して、あるべき状態を定義します。

2. **マイグレーションファイルの作成**：新しいマイグレーションファイルを作成し、現在の状態からあるべき状態への変更を定義します。

3. **マイグレーションの適用**：マイグレーションを適用して、データベースを更新します。

4. **テスト**：変更が正しく適用されたことをテストで確認します。

## ローカル開発

`supabase link`が必要なコマンド（例：`db push`, `db pull`, `migration repair`など）を実行する場合は、必ず`--local`オプションを付けてください。

```bash
# 正しい実行方法
npx supabase db push --local
npx supabase migration repair --status reverted 20250305 --local
```

## 型生成

Supabase のデータベーススキーマから自動的に TypeScript 型定義を生成するには、以下のコマンドを使用してください。

```bash
# 型定義ファイルの生成
npm run generate-types
```

型生成は以下のタイミングで実行してください：

1. **初期セットアップ時**：プロジェクトの初期セットアップ時
2. **スキーマ変更後**：データベーススキーマを変更した後
3. **マイグレーション適用後**：新しいマイグレーションを適用した後
