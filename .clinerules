# Cline Rules

このプロジェクトでの開発ルールを記載しています。

## 開発プロセスルール

### 実装の確認粒度

複雑な機能を実装する際は、適切な粒度に分割しながら確認を取りつつ進めてください。これにより、誤解や実装ミスを早期に発見し、修正することができます。

1. まず全体の設計・計画を立てる（Architectモードでの設計時も適切な粒度で確認を取る）
2. 主要なコンポーネントごとに分割して実装する
3. 各ステップで動作確認を行う
4. 全体を統合して最終確認を行う

### モード切り替えルール

実装時に論点整理が必要な場合は、Architectモードに切り替えて確認してください。これにより、技術的な課題や設計上の問題点を事前に洗い出し、効率的な実装を行うことができます。

```
# モード切り替えの例
1. 複雑な機能実装前に、Architectモードで設計・論点整理を行う
2. 論点が整理できたら、Codeモードに戻って実装を進める
3. 実装中に新たな論点が発生した場合は、再度Architectモードに切り替える
```

### Architectモードでの設計進行ルール

Architectモードで設計を進める際は、論点ごとにステップbyステップで1つずつ合意を取りながら進めてください。これにより、設計の方向性が明確になり、後の実装段階でのミスマッチを防ぐことができます。

```
# 設計進行の例
1. 機能要件の整理と優先順位付け
2. データモデルの設計
3. API設計
4. UI/UXフロー設計
5. 技術的な課題の洗い出しと解決策の検討
```

## コマンド実行ルール

### Git コマンド

git commitする前には原則 git statusで状況を確認してください。これにより、意図しないファイルの変更や、コミットし忘れを防ぐことができます。

また、コミット前にはeslintの確認を行い、コードの品質を保つようにしてください。

```bash
# 正しい手順
git status  # 変更状況を確認
git add .   # 必要なファイルをステージング
npm run lint  # eslintの確認
git commit -m "コミットメッセージ"
```

### Supabase コマンド

Supabase コマンドは必ず npx 経由で実行してください。
これは、プロジェクトでグローバルインストールされた supabase コマンドに依存せず、常に適切なバージョンの supabase コマンドを使用するためです。

```bash
# 正しい実行方法
npx supabase migration up
```

### Supabase マイグレーション

マイグレーション手順は [Supabaseの宣言的なデータベーススキーマアプローチ](https://supabase.com/docs/guides/local-development/declarative-database-schemas) に従って進めてください。
### Supabase ローカル開発

`supabase link`が必要なコマンド（例：`db push`, `db pull`, `migration repair`など）を実行する場合は、必ず`--local`オプションを付けてください。

```bash
# 正しい実行方法
npx supabase db push --local
npx supabase migration repair --status reverted 20250305 --local
```

## ファイル管理ルール

### 実装計画ファイル

実装計画や設計ドキュメントなどの一時的なファイルは、`temp`フォルダに配置してください。
このフォルダは`.gitignore`に追加されており、バージョン管理の対象外となります。

```
# 正しいファイル配置
temp/
  ├── profile-edit-plan.md
  ├── profile-edit-implementation-1.md
  └── ...
```

## ドキュメント管理ルール

### プロジェクトルールの追記

対話中にプロジェクトのルールと思われる指示を受けた場合は、`.clinerules`ファイルに追記してください。
これにより、プロジェクトのルールが一箇所に集約され、チーム全体で共有されます。

## テスト管理ルール

### テスト実装ルール

実装時に [testing.md](testing.md) に沿ってテストが必要と思われる場合はテストを追加してください。
テスト戦略ドキュメントには以下の内容が記載されています：

1. テスト対象（RLSポリシー、データベーストリガー、バリデーション）
2. テスト環境のセットアップ方法
3. テストツールとフレームワーク（Vitest、Supabase JS Client）
4. テスト実装方針（各機能ごとの具体的なテスト方法）
5. テストのフォルダ構成

テストを追加する際は、テスト戦略ドキュメントに従い、適切なフォルダ構成とテスト実装を行ってください。

